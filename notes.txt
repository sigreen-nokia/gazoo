######################################
#getting the code
######################################
#if you are not familiar with github, just download the zip from here, https://github.com/sigreen-nokia/gazoo  unzip it locally. Open a terminal
#if you are familiar with github cli then you can use git clone https://github.com/sigreen-nokia/gazoo.git 

######################################
#platforms
######################################
I've tested this on my mac running docker for desktop  (for ARM CPU's enable rosseta in advanced settings)
I've also tested this on ubuntu-linx(20.04) installing docker with these steps https://www.ionos.co.uk/digitalguide/server/configuration/install-docker-on-ubuntu-2004/ 
It will probably also work on a windows 10 machine with wsl installed (ubuntu image), using the wsl linux terminal to run it.

######################################
#pre requisits
######################################
you just need to install docker or on mac docker desktop

######################################
#simplest way to get started: just run my docker image
######################################
docker run -d  -v /tmp/gazoo-commands:/tmp/gazoo-commands --restart always --name=gazoo -v ${PWD}/scripts:/scripts -p 8080:8080 simonjohngreen/gazoo

######################################
#dev method, allows you the opertunity to customise the scripts. From the git source this builds your own private docker image and then runs it. it doesn't use my image from dockerhub.
######################################
#build the docker image locally using the git repo code 
docker build --platform=linux/amd64 -t gazoo:1.0 .
#run your local built docker image
docker run -d --restart always --name=gazoo -v /tmp/gazoo-commands:/tmp/gazoo-commands -v ${PWD}/scripts:/scripts -p 8080:8080 gazoo:1.0 

######################################
#playing sound/speech when Defender events arrive 
######################################
#gazoo speaks start stop and test events. 
#for start and stop events gazoo will speak the event and the event id
#for test events gazoo will just say test event
#see scripts/default.sh for how its done

#Configuring a  MAC OSX host to speak when events arrrive into gazoo 
#In a MAC terminal window, copy paste the following 
cat << EOF > /usr/local/bin/gazoo-speak.sh
#!/bin/bash
tail -f -n0 /tmp/gazoo-commands/streamer | xargs -n1 say
EOF
chmod a+x /usr/local/bin/gazoo-speak.sh 
touch /tmp/gazoo-commands/streamer
/usr/local/bin/gazoo-speak.sh &
#this line is suppose to restart the service on powerup, seems to be broken on my mac.
sudo bash
(crontab -l ; echo "@reboot /usr/local/bin/gazoo-speak.sh") | crontab -
exit

#Configuring an Ubuntu 20.04 host to speak when defender events arrrive into gazoo 
#In a MAC terminal window, copy paste the following 
cat << EOF > /usr/local/bin/gazoo-speak.sh
#!/bin/bash
tail -f -n0 /tmp/gazoo-commands/streamer | xargs -n1 say
EOF
chmod a+x /usr/local/bin/gazoo-speak.sh 
touch /tmp/gazoo-commands/streamer
/usr/local/bin/gazoo-speak.sh &
#this line is suppose to restart the service on powerup, seems to be broken on my mac.
sudo bash
(crontab -l ; echo "@reboot /usr/local/bin/gazoo-speak.sh") | crontab -
exit


###############################
#Configuring your defender notification in the Deepfield ui
###############################
#assumption is that you have port 8080 opened up all the way to the docker
#
#in the defender ui
#Defender->notification->
#       name gazoo
#       tick webhook
#       url: http://[your docker hosts ip of fqdn]:8080
#       click test, you should see a green test sent successfully if your firewall and docker allow the 8080 port traffic
#       start and end event should be ticked, this is the default
#       save
#
#Then add the notification to the policy




#######################
#how to push your private local docker image up to github
#######################
docker login --username=simonjohngreen 
docker image list | grep gazoo
docker tag ba6409e01784 simonjohngreen/gazoo:latest
docker push simonjohngreen/gazoo:latest

docker image tag rhel-httpd:latest registry-host:5000/myadmin/rhel-httpd:latest
docker image push registry-host:5000/myadmin/rhel-httpd:latest


#######################
#to stop and cleanup the gazoo docker daemon 
#######################
docker stop gazoo
docker rm gazoo
docker image rm [the id of the gazoo image]

#cleanup absoluting everything in your docker, good for testing but be carefull in prod
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)
docker rmi --force $(docker images -q)

#######################
#how to debug the docker build if it fails
#######################
#here I change the build command to get the id's
DOCKER_BUILDKIT=0 docker build --platform=linux/amd64 -t gazoo:1.0 .
#find the container that failed:
docker ps -a
#Commit the container id to an image:
docker commit 6934ada98de6
docker image list
#run the image
docker run -it d035d8a5a34a bash -il
#try the failed commands inside that docker

#######################
#connect to a running gazoo docker with bash
#######################
docker container exec -it gazoo /bin/bash
gazoo --help

#######################
#how does gazoo handle defender events
#######################
#
#for defender events
#gazoo will when its sent a Defender event with http://x.x.x.x:8080/
#run the script in scripts/default.sh, 
#this is quite different to collectord see file pkg/api/index.go fir the code changes if you are interrested 
#
#additionaly
#gazoo will if its sent a webhook with for example http://x.x.x.x/test
#run the script in dir scripts/test.sh 
#gazoo will if its sent a webhook for example http://x.x.x.x/test/me
#run the scrit in dir scripts/test/me.sh 

#######################
#running gazoo in debug 
#######################
#uncomment this line of Dockerfile
#CMD [ "gazoo", "--log-level", "debug", "--log-http-request", "--log-hook-output"  ]
#rebuild and redeploy gazoo
docker logs -f gazoo
#I found wireshark more usefull

##################################
simulating a defender webhook locally without defender
#################################
#start event
curl --data '{"Event ID":"7", "Status":"ACTIVE"}' -H 'Content-Type: application/json' http://localhost:8080/
#stop event
curl --data '{"Event ID":"7", "Status":"FINISHED"}' -H 'Content-Type: application/json' http://localhost:8080/
#test event
curl --data '{"Status":"TEST"}' -H 'Content-Type: application/json' http://localhost:8080/
#in valid event event
curl --data '{"Status":"TESTY"}' -H 'Content-Type: application/json' http://localhost:8080/

##################################
#example dump of a Defender event data block
##################################
{"Event ID": 10, "Event Console": "https://exp-e-upgrade-testing-vlabs.deepfield.net/defender/events/10", "Status": "ACTIVE", "Start": "2023-11-28 22:20:37.000000 UTC", "End": "-", "Policy ID": 1, "Policy Name": "vlabs_default", "Dimension ID": 192, "Dimension Name": "Customer", "Dimension Configuration": "https://exp-e-upgrade-testing-vlabs.deepfield.net/config/dimensions/192", "Protected Object ID": 7, "Protected Object Name": "96.0.0.0/4", "Protected Object Defender Console": "https://exp-e-upgrade-testing-vlabs.deepfield.net/defender/policies/1/7", "Protected Object Configuration": "https://exp-e-upgrade-testing-vlabs.deepfield.net/config/dimensions/192/7", "Threshold": "DDoS directed at host exceeds 60.00 kpps", "Threshold Exceeded": "2023-11-28 22:20:37.000000 UTC", "Threshold Inactive": "-", "Peak DDoS PPS": 65063, "Peak DDoS BPS": 54975920, "DDoS Types": "tcpreflection, wsd, botnet, arms, dns, tcpflood", "Top Destinations by DDoS+Dropped BPS": {"columns": ["Addr", "Peak DDoS+Dropped BPS"], "rows": [["100.100.100.214", 54965253.0], ["100.100.100.51", 6400.0], ["100.100.100.58", 2133.0], ["100.100.100.40", 1066.0], ["100.100.100.42", 1066.0]]}, "Top Destinations by DDoS+Dropped PPS": {"columns": ["Addr", "Peak DDoS+Dropped PPS"], "rows": [["100.100.100.214", 65030.0], ["100.100.100.51", 20.0], ["100.100.100.58", 6.0], ["100.100.100.40", 3.0], ["100.100.100.42", 3.0]]}}

#################################
#tracing in wireshark
#################################
in wireshark add the filter tcp.port == 8080
Look for the HTTP/JSON protocol messages
 
######################################
#other old notes
######################################
#windows method1
PowerShell -Command "Add-Type â€“AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('hello');"
#windows method3
mshta vbscript:Execute("CreateObject(""SAPI.SpVoice"").Speak(""Hello"")(window.close)")
#mac
say "dee dos event"
#ubuntu linux
spd-say "hello"
#
#to get the sounds out of the docker, simplest would be to use a file in a shared volumes with the commands 
#docker run -d  -v /tmp/gazoo-commands:/tmp/gazoo-commands --restart always --name=gazoo -v ${PWD}/scripts:/scripts -p 8080:8080 gazoo:1.0
#then echo to it what you want to say echo xyx >> /tmp/xxxx/yyy
#then have a command on the host running those commands
#
#failing that PulseAudio which is on mac linux 
#looks like pulseaudio also has a windows https://www.freedesktop.org/wiki/Software/PulseAudio/Ports/Windows/Support/
#mac
#brew install pulseaudio
#ubuntu
#apt-get install pulseaudio
#
#on the host
#

#how playing sounds on an ubuntu vm somewhere else, to my mac, over udp
#on my mac
# brew install ffmpeg
# ffplay -nodisp -ac 2 -acodec pcm_s16le -ar 48000 -analyzeduration 0 -probesize 32 -f s16le -i udp://0.0.0.0:18181
#on the ubuntu vm
# add a sound device in esxi to the vm and reboot
# sudo apt-get install open-vm-tools-desktop -y
# reboot
# sudo apt-get install ffmpeg
# pactl load-module module-null-sink sink_name=remote
#ffmpeg -f pulse -i "remote.monitor" -ac 2 -acodec pcm_s16le -ar 48000 -f s16le "udp://192.168.1.210:18181"
#play a test sound on the ubuntu vm
# sudo apt-get install  alsa-utils
# /usr/bin/aplay /usr/share/sounds/alsa/Front_Center.wav 




#how playing sounds on an ubuntu vm using vmware and rdp
#on the ubuntu vm
# add a sound device in esxi to the vm and reboot
# sudo apt-get install open-vm-tools-desktop -y
# reboot
#sudo lspci | grep Audio
#02:04.0 Audio device: VMware HD Audio Controller (rev 09)
#sudo apt-get install alsa-base pulseaudio
#sudo chown -R $USER:$USER $HOME/
#pulseaudio --start
#play a test sound on the ubuntu vm
# sudo apt-get install  alsa-utils
# /usr/bin/aplay /usr/share/sounds/sound-icons/prompt.wav 2>/dev/null & 

 







